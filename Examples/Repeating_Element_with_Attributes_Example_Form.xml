<?xml version="1.0"?>
<definition xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="3">
  <properties>
    <root_name>root</root_name>
    <schema_uri/>
    <namespaces/>
  </properties>
  <form>
    <properties>
      <type>form</type>
      <access>TRUE</access>
      <collapsed>FALSE</collapsed>
      <collapsible>FALSE</collapsible>
      <disabled>FALSE</disabled>
      <executes_submit_callback>FALSE</executes_submit_callback>
      <multiple>FALSE</multiple>
      <required>FALSE</required>
      <resizable>FALSE</resizable>
      <tree>TRUE</tree>
      <actions>
        <create>NULL</create>
        <read>
          <path>/root</path>
          <context>document</context>
        </read>
        <update>NULL</update>
        <delete>NULL</delete>
      </actions>
    </properties>
    <children>
      <element name="description">
        <properties>
          <type>item</type>
          <access>TRUE</access>
          <collapsed>FALSE</collapsed>
          <collapsible>FALSE</collapsible>
          <description>This form showcases how to have a child form field can modify the value of a parent form field. It does so using tabs, but this could be applied to any form field which can have children, such as field sets or tags, etc.</description>
          <disabled>FALSE</disabled>
          <executes_submit_callback>FALSE</executes_submit_callback>
          <multiple>FALSE</multiple>
          <required>FALSE</required>
          <resizable>FALSE</resizable>
          <tree>TRUE</tree>
        </properties>
        <children/>
      </element>
      <element name="tabs">
        <properties>
          <type>tabs</type>
          <access>TRUE</access>
          <collapsed>FALSE</collapsed>
          <collapsible>FALSE</collapsible>
          <disabled>FALSE</disabled>
          <executes_submit_callback>FALSE</executes_submit_callback>
          <multiple>FALSE</multiple>
          <required>FALSE</required>
          <resizable>FALSE</resizable>
          <title>Tabs</title>
          <tree>TRUE</tree>
        </properties>
        <children>
          <element name="element">
            <properties>
              <type>tabpanel</type>
              <access>TRUE</access>
              <collapsed>FALSE</collapsed>
              <collapsible>FALSE</collapsible>
              <description>The 'tabpanel' is responsible for &lt;strong&gt;creating&lt;/strong&gt;, &lt;string&gt;reading&lt;/strong&gt; and &lt;strong&gt;deleting&lt;/strong&gt; the XML Element. </description>
              <disabled>FALSE</disabled>
              <executes_submit_callback>FALSE</executes_submit_callback>
              <multiple>FALSE</multiple>
              <required>FALSE</required>
              <resizable>FALSE</resizable>
              <title>Element</title>
              <tree>TRUE</tree>
              <actions>
                <create>
                  <path>self::node()</path>
                  <context>parent</context>
                  <schema/>
                  <type>element</type>
                  <prefix>NULL</prefix>
                  <value>element</value>
                </create>
                <read>
                  <path>element</path>
                  <context>parent</context>
                </read>
                <update>NULL</update>
                <delete>
                  <path>self::node()</path>
                  <context>self</context>
                </delete>
              </actions>
            </properties>
            <children>
              <element name="attribute">
                <properties>
                  <type>select</type>
                  <access>TRUE</access>
                  <collapsed>FALSE</collapsed>
                  <collapsible>FALSE</collapsible>
                  <description>The &lt;i&gt;attribute select&lt;/i&gt; uses the &lt;/strong&gt;parent context&lt;/strong&gt; with &lt;strong&gt;self::node()&lt;/strong&gt; to select the XML Element the tabpanel &lt;strong&gt;created&lt;/strong&gt;. It then &lt;strong&gt;creates&lt;/strong&gt;/&lt;strong&gt;reads&lt;/strong&gt; an &lt;strong&gt;@attribute&lt;/strong&gt; on the XML Element created by the tabpanel.</description>
                  <disabled>FALSE</disabled>
                  <executes_submit_callback>FALSE</executes_submit_callback>
                  <multiple>FALSE</multiple>
                  <options>
                    <one>one</one>
                    <two>two</two>
                  </options>
                  <required>FALSE</required>
                  <resizable>FALSE</resizable>
                  <title>attribute</title>
                  <tree>TRUE</tree>
                  <actions>
                    <create>
                      <path>self::node()</path>
                      <context>parent</context>
                      <schema/>
                      <type>attribute</type>
                      <prefix>NULL</prefix>
                      <value>attribute</value>
                    </create>
                    <read>
                      <path>@attribute</path>
                      <context>parent</context>
                    </read>
                    <update>
                      <path>self::node()</path>
                      <context>self</context>
                    </update>
                    <delete>NULL</delete>
                  </actions>
                </properties>
                <children/>
              </element>
              <element name="value">
                <properties>
                  <type>textfield</type>
                  <access>TRUE</access>
                  <collapsed>FALSE</collapsed>
                  <collapsible>FALSE</collapsible>
                  <description>The &lt;i&gt;value textfield&lt;/i&gt; &lt;strong&gt;reads&lt;/strong&gt; the XML Element &lt;strong&gt;created&lt;/strong&gt; or &lt;strong&gt;read&lt;/strong&gt; by tabpanel, and &lt;strong&gt;updates&lt;/strong&gt; it with the value entered by the user. &lt;br/&gt; The &lt;i&gt;value textfield&lt;/i&gt; must use parent context for both &lt;strong&gt;read&lt;/strong&gt; and &lt;strong&gt;update&lt;/strong&gt;. This is to handle both cases when the XML Element doesn't exist prior (&lt;strong&gt;update&lt;/strong&gt; must be able to change what &lt;strong&gt;read&lt;/strong&gt; could not select as the XML Element has not been created yet) and when the XML Element does exist (&lt;strong&gt;read&lt;/strong&gt; will populate the textfield with the value).</description>
                  <disabled>FALSE</disabled>
                  <executes_submit_callback>FALSE</executes_submit_callback>
                  <multiple>FALSE</multiple>
                  <required>FALSE</required>
                  <resizable>FALSE</resizable>
                  <title>Value</title>
                  <tree>TRUE</tree>
                  <actions>
                    <create>NULL</create>
                    <read>NULL</read>
                    <update>
                      <path>self::node()</path>
                      <context>parent</context>
                    </update>
                    <delete>NULL</delete>
                  </actions>
                </properties>
                <children/>
              </element>
            </children>
          </element>
        </children>
      </element>
    </children>
  </form>
</definition>
